(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{322:function(e,a,r){"use strict";r.r(a);var s=r(7),t=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Docker "),a("em",[e._v("初级用法")]),e._v("和一个"),a("strong",[e._v("解压缩")]),e._v("工具（像 7z, winrar）一样")]),e._v(" "),a("p",[e._v("主要内容是「容器」和「镜像」，镜像可以看作压缩好的压缩包，而容器可以看作每次从压缩包里解压出来的文件，每次解压出来的文件都是独立的，对文件的操作也不会影响压缩包")]),e._v(" "),a("blockquote",[a("p",[a("del",[e._v("其实就是类和实例的关系，但我想换个比喻")])]),e._v(" "),a("p",[e._v("不说类和实例的关系还是因为，镜像里是有具体内容的，不像类那样说抽象的定义")])]),e._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("p",[e._v("首先，安装。我还是不习惯用桌面版 docker desktop 的，所以现在要用也会到 WSL 里面用原生的 docker。")]),e._v(" "),a("p",[e._v("安装方法去官网跟着步骤走就行不多说。提一嘴的是，官网直接点进去是 docker desktop 的安装（包括 linux 中使用 desktop），原生的 docker 在 engine 页面里 https://docs.docker.com/engine/install/")]),e._v(" "),a("p",[e._v("WSL2 中安装 docker 也可以看这篇文章："),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/421998834",target:"_blank",rel:"noopener noreferrer"}},[e._v("wsl2安装Linux原生Docker"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("启动 docker 时 "),a("code",[e._v("service docker start")]),e._v("，这时如果报错 Failed to start docker.service: Interactive authentication required. 可能是已经开启过了，重启一下即可 "),a("code",[e._v("service docker restart")])]),e._v(" "),a("h2",{attrs:{id:"镜像命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像命令"}},[e._v("#")]),e._v(" 镜像命令")]),e._v(" "),a("ul",[a("li",[e._v("查看镜像 "),a("code",[e._v("docker images")])]),e._v(" "),a("li",[e._v("搜索镜像 "),a("code",[e._v("docker search imageName")])]),e._v(" "),a("li",[e._v("下载镜像 "),a("code",[e._v("docker pull xxx")])]),e._v(" "),a("li",[e._v("删除镜像 "),a("code",[e._v("docker rmi imageName")])]),e._v(" "),a("li",[e._v("更新镜像内容：\n在镜像容器内操作完后，主机上 "),a("code",[e._v('docker commit -m=“xxx” -a="xxx" containerId newImageName')]),e._v(" -a是作者")]),e._v(" "),a("li",[e._v("构建镜像 "),a("code",[e._v("docker build -t ImageName path")]),e._v(" path 是 Dockerfile 所在目录")])]),e._v(" "),a("h2",{attrs:{id:"容器命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器命令"}},[e._v("#")]),e._v(" 容器命令")]),e._v(" "),a("ul",[a("li",[e._v("启动容器")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-itd")]),e._v(" ubuntu:15.10 /bin/bash\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-i")]),e._v(" 允许标准输入\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-t")]),e._v(" 指定一个终端\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" 后台模式，返回容器 "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-P")]),e._v(" 容器内用的端口随机映射到主机\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" 外端口:内端口 指定映射（外端口可以填ip）默认tcp端口，端口/udp udp端口\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" 243c32535da7 /bin/bash\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exit")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("ul",[a("li",[e._v("查看容器 "),a("code",[e._v("docker ps -a")])]),e._v(" "),a("li",[e._v("查看容器标准输出 "),a("code",[e._v("docker logs id")])]),e._v(" "),a("li",[e._v("停止容器 "),a("code",[e._v("docker stop id")])]),e._v(" "),a("li",[e._v("重启容器 "),a("code",[e._v("docker restart id")])]),e._v(" "),a("li",[e._v("删除容器 "),a("code",[e._v("docker rm -f id")]),e._v(" "),a("ul",[a("li",[e._v("删除所有终止的容器 "),a("code",[e._v("docker container prune")])])])]),e._v(" "),a("li",[e._v("查看容器端口映射 "),a("code",[e._v("docker port id")])]),e._v(" "),a("li",[e._v("查看容器内进程 "),a("code",[e._v("docker top id")])])]),e._v(" "),a("p",[e._v("进阶一点的用法像 Dockerfile、Compose 这些之后用到再记")])])}),[],!1,null,null,null);a.default=t.exports}}]);